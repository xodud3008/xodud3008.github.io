I"f<h4 id="문제">문제</h4>
<p>정수를 요소로 갖는 문자열을 입력받아 다음의 조건을 만족하는 <code class="language-plaintext highlighter-rouge">LIS</code>의 길이를 리턴</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">LIS</code> : 배열의 연속되지 않는 부분 배열 중 모든 요소가 엄격하게 오름차순으로 정렬된 가장 긴 부분 배열</li>
  <li>배열 [1, 2, 3]의 subseqeunce는 [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]</li>
  <li>엄격한 오름차순 : 배열이 동일한 값을 가진 요소없이 오름차순으로 정렬되어 있는 경우</li>
</ul>

<h4 id="인자">인자</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">number</code> 타입을 요소로 갖는 배열</li>
  <li><code class="language-plaintext highlighter-rouge">arr.length</code>는 60,000 이하</li>
  <li><code class="language-plaintext highlighter-rouge">arr[i]</code>는 100,000 이하 정수</li>
</ul>

<h4 id="주의사항">주의사항</h4>
<ul>
  <li>LIS의 길이를 리턴</li>
  <li>LIS가 존재하지 않는 경우는 없다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">LIS</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">N</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
  <span class="c1">// lis[i]는 i에서 끝나는 LIS의 길이를 저장</span>
  <span class="c1">// 최소한 각 요소 하나로 LIS를 만들 수 있으므로 1로 초기화한다.</span>
  <span class="kd">const</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">N</span><span class="p">).</span><span class="nx">fill</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// i에서 끝나는 LIS의 길이</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// i 이전의 인덱스만 검사하면 된다.</span>
      <span class="c1">// i는 1부터 시작하므로, 짧은 길이부터 검사한다. (bottom-up 방식)</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">lis</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">lis</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lis</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(...</span><span class="nx">lis</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>
:ET