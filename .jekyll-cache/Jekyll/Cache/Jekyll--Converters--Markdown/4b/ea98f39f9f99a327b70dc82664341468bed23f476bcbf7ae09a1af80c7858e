I"7<h4 id="변수">변수</h4>
<h5 id="개념">개념</h5>
<ul>
  <li>상황에 따라 변할 수 있는 값</li>
  <li>선언은 let을 사용</li>
  <li>할당을 위해 ‘=’ 사용
ex) let i = apple</li>
  <li>할당이 없다면 undefined(정의되지 않음)</li>
</ul>

<h5 id="활용">활용</h5>
<ul>
  <li>변수를 활용하여 반복적인 작업 편리하게 할 수 있다.
ex) 구구단을 출력할 때, 단수를 변수로 설정해서 변수만 바꿔가며 출력 가능</li>
  <li>변수명에 공백 사용 불가, Camel Case로 작성.</li>
</ul>

<h4 id="타입">타입</h4>
<h5 id="개념-1">개념</h5>
<ul>
  <li>숫자, 문자열, 불리언 등 변수의 타입을 나타낸다.</li>
  <li>타입이 섞인 배열, 객체 등이 있다.(자료형)</li>
  <li>이 외에 undefined, 함수가 있다.</li>
</ul>

<h4 id="함수">함수</h4>
<h5 id="개념-2">개념</h5>
<ul>
  <li>논리적인 일련의 작업을 하는 하나의 단위, 작은 기능의 단위</li>
  <li>반복적으로 실행되는 작업을 효율적으로 관리할 수 있다.</li>
  <li>입력값을 넣으면 항상 출력값을 반환한다.
    <h5 id="선언방법">선언방법</h5>
  </li>
  <li>선언식, 표현식, 화살표 함수</li>
</ul>

<h4 id="조건문">조건문</h4>
<h5 id="개념-3">개념</h5>
<ul>
  <li>비교 연산자를 사용하여 조건을 판별하는 기준을 설정</li>
  <li>비교는 항상 true or false
ex) 비교연산자 <code class="language-plaintext highlighter-rouge">&lt;</code>, <code class="language-plaintext highlighter-rouge">&gt;</code>, <code class="language-plaintext highlighter-rouge">&gt;=</code>, <code class="language-plaintext highlighter-rouge">&lt;=</code>, <code class="language-plaintext highlighter-rouge">===</code>, <code class="language-plaintext highlighter-rouge">!==</code>, <code class="language-plaintext highlighter-rouge">&amp;&amp;</code>, <code class="language-plaintext highlighter-rouge">||</code>, <code class="language-plaintext highlighter-rouge">!</code>…
※ ==, != 는 사용하지 않는 것이 좋다.</li>
</ul>
:ET