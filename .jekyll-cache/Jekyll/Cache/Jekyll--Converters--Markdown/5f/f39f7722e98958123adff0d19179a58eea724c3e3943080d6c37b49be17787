I"G<h2 id="component-driven-developmentcdd">Component Driven Development(CDD)</h2>

<h3 id="컴포넌트-단위-개발">컴포넌트 단위 개발</h3>

<p>디자인과 개발 단계에서부터 재사용할 수 있는 UI 컴포넌트를 만들어 효율적으로 페이지를 구성하는 방법</p>

<h4 id="storybook">Storybook</h4>

<p>CDD가 트렌드로 자리잡으면서 이를 지원하는 도구 중 하나인 Component Explorer(컴포넌트 탐색기) 등장. 많은 UI 개발도구 중 하나인 Storybook</p>

<h5 id="특징">특징</h5>

<ul>
  <li>각각의 컴포넌트들을 따로 볼 수 있게 구성해주어 한번에 하나의 컴포넌트에서 작업 가능</li>
  <li>전체 UI를 한눈에 보고 개발할 수 있음</li>
  <li>재사용성 확대를 위한 컴포넌트 문서화</li>
  <li>자동으로 컴포넌트를 시각화하여 시뮬레이션할 수 있는 다양한 테스트 상태 확인 가능</li>
  <li>사전에 버그 방지, 테스트 및 개발 속도 향상</li>
  <li>독립적인 개발환경에서 실행
    <ul>
      <li>애플리케이션의 다양한 상황에 구애받지 않고 UI 컴포넌트 집중적으로 개발할 수 있음</li>
    </ul>
  </li>
</ul>

<h5 id="주요-기능">주요 기능</h5>

<ul>
  <li>UI 컴포넌트들을 카탈로그 화하기</li>
  <li>컴포넌트 변화를 Stories로 저장</li>
  <li>핫 모듈 재 로딩과 같은 개발 툴 경험을 제공</li>
  <li>리액트를 포함한 다양한 뷰 레이어 지원</li>
</ul>

<h5 id="설치방법">설치방법</h5>

<p>https://storybook.js.org/tutorials/intro-to-storybook/react/en/get-started/</p>

<p>### CSS in JS 방법론</p>

<p>인터넷이 만들어진 이후 기술의 발달과 다양한 환경(디바이스)에서 인터넷 사용. 프로젝트의 규모나 복잡도가 커지고 함께 작업하는 팀원들의 수 증가. <strong>구조화된 CSS 필요성 대두</strong></p>

<h4 id="css-구조화를-위한-다양한-시도">CSS 구조화를 위한 다양한 시도</h4>

<h5 id="css-전처리기css-prreprocessor">CSS 전처리기(Css Prreprocessor)</h5>

<ul>
  <li>CSS가 구조적으로 작성될 수 있게 도움을 주는 도구</li>
  <li>CSS 전처리기 자체만으로는 웹서버가 인지하지 못함
    <ul>
      <li>각 CSS 전처리기에 맞는 컴파일러 사용</li>
      <li>컴파일러 사용하게 되면 실제로 사용하는 CSS 문서로 변환</li>
    </ul>
  </li>
  <li>이를 통해 CSS 파일들을 잘 구조화 할 수 있게 되었고, 최소한 CSS 파일을 몇개의 작은 파일로 분리할 수 있는 방법이 생김</li>
</ul>

<h6 id="sasssyntactically-awesome-style-sheets">SASS(Syntactically Awesome Style Sheets)</h6>

<p>가장 유명한 CSS 전처리기.  CSS를 확장해주는 스크립팅 언어. CSS를 만들어주는 자바스크립트처럼 특정 속성(ex. color, margin, width 등)의 값(ex. #ffffff, 25rem, 100px 등)을 변수로 선언하여 재사용할 수 있도록 함. SASS는 SCSS 코드를 읽어서 전처리한 다음 컴파일해서 전역 CSS 번들 파일을 만들어주는 전처리기의 역할.</p>

<p>SASS가 <code class="language-plaintext highlighter-rouge">CSS 구조화</code>를 해결해 주는 장점이 있지만 전처리기가 내부에서 어떤 작업을 하는지는 알지 못한 채, 스타일이 겹치는 문제를 해결하기 위핸 단순히 계층 구조를 만들어 내는 것에 의지. 그 결과 컴파일된 CSS의 용량은 어마어마하게 커지게 되었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SASS 변수 사용 예제</span>
<span class="c1">// 반복되는 코드가 있으면 변수를 활용해서 재사용. 변수 선언할 때는 $ 기호 활용</span>

<span class="nx">$base</span><span class="o">-</span><span class="nx">color</span><span class="p">:</span> <span class="nx">rgb</span><span class="p">(</span><span class="mi">198</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mf">0.88</span><span class="p">)</span>
<span class="p">.</span><span class="nx">alert</span><span class="p">{</span>
	<span class="nl">border</span><span class="p">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="nx">$border</span><span class="o">-</span><span class="nx">dark</span>
<span class="p">}</span>
<span class="p">.</span><span class="nx">button</span><span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="nx">$border</span><span class="o">-</span><span class="nx">dark</span>
</code></pre></div></div>

<h5 id="css-방법론">CSS 방법론</h5>

<p>CSS 전처리기의 문제를 보완하기 위해 BEM, OOCSS, SMACSS 같은 CSS 방법론 대두</p>

<h6 id="지향점">지향점</h6>

<ul>
  <li>코드의 재사용</li>
  <li>코드의 간결화(유지보수 용이)</li>
  <li>코드의 확장성</li>
  <li>코드의 예측성(클래스 명으로 의미 예측)</li>
</ul>

<h5 id="대표적-css-방법론-bem">대표적 CSS 방법론 BEM</h5>

<p>Block, Element, Modifier로 구분하여 클래스명을 작성하는 방법. Block, Element, Modifier 각각 -와 __로  구분.</p>

<p>클래스명은 재사용을 용이하게 하며, HTML/CSS/SASS 파일에서도 더 일관된 코딩 구조를 만들어 준다.</p>

<p>하지만 클래스명 선택자가 장황해지고, 긴 클래스명 때문에 마크업이 불필요하게 커지며, 재사용하려고 할 때마다 모든 UI 컴포넌트를 명시적으로 확장해야 하는 문제점 발생.</p>

<p><strong>SASS와 BEM에서 캡슐화를 위해서는 개발자들이 유일한 클래스명을 선택하는 것에 의존할 수 밖에 없음</strong></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// BEM 클래스명 작성 방법</span>
<span class="c1">// Block		Element.    Modifier</span>
	<span class="p">.</span><span class="nx">header__navigation</span><span class="o">--</span><span class="nx">navi</span><span class="o">-</span><span class="nx">text</span> <span class="p">{</span>
		<span class="nl">color</span><span class="p">:</span> <span class="nx">red</span><span class="p">;</span>
	<span class="p">}</span>

</code></pre></div></div>

<h5 id="styled-component">Styled-component</h5>

<p>CSS를 컴포넌트 영역으로 불러들이기 위해서(캡슐화를 위해) CSS-in-JS가 탄생. 대표적으로 Styled-component가 있다. Styled-component를 사용하면 기존 CSS 문법으로도 스타일 속성이 추가된 React 컴포넌트를 만들 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Styled-component 예시</span>
<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">a</span><span class="s2">`
	display: inline-block;
	border-radius: 3px;
	padding: 0.5rem 0;
	margin: 0.5rem 1rem;
	width: 11rem;
`</span><span class="p">;</span>
</code></pre></div></div>

<h6 id="styled-component-특징">Styled-component 특징</h6>

<ul>
  <li><strong>Automatic critical CSS</strong>: 화면에 어떤 컴포넌트가 랜더링 되었는지 추적해서 해당 컴포넌트에 대한 스타일 자동 삽입.</li>
  <li><strong>No class name bugs</strong>: 스스로 유니크한 <code class="language-plaintext highlighter-rouge">className</code> 을 생성. 이는 <code class="language-plaintext highlighter-rouge">className</code> 의 중복이나 오타로 인한 버그를 줄여준다.</li>
  <li><strong>Easier deletion of CSS</strong>: 모든 스타일 속성이 특정 컴포넌트와 연결되어 있기 때문에 컴포넌트를 더 이상 사용하지 않아 삭제할 경우 이에 대한 스타일 속성도 함께 삭제</li>
  <li><strong>Simple dynamic styling</strong>: <code class="language-plaintext highlighter-rouge">className</code>을 일일이 수동으로 관리할 필요 없이 React 의 props 나 전역 속성을 기반으로 컴포넌트에 스타일 속성을 부여하기 때문에 간단하고 직관적</li>
  <li><strong>Painless maintenance</strong>: 컴포넌트에 스타일을 상속하는 속성을 찾아 다른 CSS 파일들을 검색하지 않아도 되기 때문에 코드의 크기가 커지더라도 유지보수가 어렵지 않음</li>
  <li><strong>Automatic vendor prefixing</strong>: 개별 컴포넌트마다 기존의 CSS 를 이용하여 스타일 속성을 정의하면 될 뿐입니다. 이외의 것들은 Styled Component 가 알아서 처리</li>
</ul>

<h6 id="설치방법-1">설치방법</h6>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># with npm
$ npm install --save styled-components
---------------------------------------------------------------------------
# with yarn
$ yarn add styled-components
</code></pre></div></div>

<p>Styled-Component는 Package.json에 다음 코드를 추가하도록 권장</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
	<span class="dl">"</span><span class="s2">resolutions</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
		<span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^5</span><span class="dl">"</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h6 id="사용방법">사용방법</h6>

<ol>
  <li>스타일을 정의함과 동시에 해당 스타일을 가진 컴포넌트를 만들 수 있다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// &lt;h1&gt; 태그를 렌더링 할 title component를 만듭니다.</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">h1</span><span class="s2">`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
`</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
  	<span class="o">&lt;</span><span class="nx">Title</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">World</span><span class="o">!&lt;</span><span class="sr">/Title</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>스타일 속성을 지닌 컴포넌트를 정의할 때 함수를 전달하고, 그 함수 안에서 props를 사용할 수도 있다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Button component</span>
<span class="p">...</span>
  <span class="nx">background</span><span class="p">:</span> <span class="nx">$</span><span class="p">{(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">primary</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">palevioletred</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span><span class="p">)};</span>
  <span class="nl">color</span><span class="p">:</span> <span class="nx">$</span><span class="p">{(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">primary</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">white</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">palevioletred</span><span class="dl">"</span><span class="p">)};</span>
<span class="p">...</span>

<span class="c1">// App component</span>
<span class="p">...</span>
  <span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span><span class="nx">Normal</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">primary</span><span class="o">&gt;</span><span class="nx">Primary</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span><span class="p">...</span>
</code></pre></div></div>

<ol>
  <li>같은 스타일 속성을 지닌 여러개의 컴포넌트들 중 몇 개의 컴포넌트에는 약간의 변화를 주고 싶은 경우 상속받고자 하는 스타일 속성을 지닌 컴포넌트를 <code class="language-plaintext highlighter-rouge">styled()</code>로 감싼 뒤, 변경할 속성만 새로 정의</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기존의 Button 컴포넌트에 Tomato 컴포넌트만을 위한 새로운 속성 추가</span>
<span class="kd">const</span> <span class="nx">Tomato</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">(</span><span class="nx">Button</span><span class="p">)</span><span class="s2">`
  color: tomato;
  border-color: tomato;
`</span><span class="p">;</span>
</code></pre></div></div>

<h5 id="useref">useRef</h5>

<p>useRef를 사용해야 하는 경우(DOM 엘리먼트의 주소값을 활용해야 하는 경우)</p>

<ul>
  <li>focus</li>
  <li>text selection</li>
  <li>media playback</li>
  <li>애니메이션 적용</li>
  <li>d3.js, greensock등 DOM 기반 라이브러리 활용</li>
</ul>

<p>React는 이런 예외적인 상황에서 useRef으로 DOM 노드, 엘리먼트, 그리고 리액트 컴포넌트 주소값을 참조할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">주소값을_담는_그릇</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="nx">참조자료형</span><span class="p">)</span>
<span class="c1">// 이제 주소값을_담는_그릇 변수에 어떤 주소값이든 담을 수 있습니다.</span>
<span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">주소값을_담는_그릇</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="o">/&gt;</span>
        <span class="p">{</span><span class="cm">/* React에서 사용 가능한 ref라는 속성에 주소값을_담는_그릇을 값으로 할당하면*/</span><span class="p">}</span>
        <span class="p">{</span><span class="cm">/* 주소값을_담는_그릇 변수에는 input DOM 엘리먼트의 주소가 담깁니다. */</span><span class="p">}</span>
        <span class="p">{</span><span class="cm">/* 향후 다른 컴포넌트에서 input DOM 엘리먼트를 활용할 수 있습니다. */</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
</code></pre></div></div>

<p>이 주소값은 컴포넌트가 re-render 되더라도 바뀌지 않는다. 이 특성을 활용하여 아래의 제한된 상황에서 useRef를 활용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TextInputWithFocusButton</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">inputEl</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">onButtonClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">inputEl</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputEl</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">text</span><span class="dl">"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onButtonClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Focus</span> <span class="nx">the</span> <span class="nx">input</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

:ET